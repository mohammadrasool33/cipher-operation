{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\muham\\\\Desktop\\\\cipher-operation\\\\Lab1\\\\cipher-frontend\\\\src\\\\components\\\\MonoalphabeticCipher.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './CipherStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MonoalphabeticCipher() {\n  _s();\n  const [text, setText] = useState('');\n  const [result, setResult] = useState('');\n  const [currentKey, setCurrentKey] = useState(null);\n  const [attackResults, setAttackResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const validateInputs = () => {\n    const newErrors = {};\n\n    // Validate text\n    if (!text.trim()) {\n      newErrors.text = 'Text is required';\n    } else if (text.length > 500) {\n      newErrors.text = 'Text must be less than 500 characters';\n    }\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleEncrypt = async () => {\n    if (!validateInputs()) return;\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/monoalphabetic/encrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Server error');\n      }\n      const data = await response.json();\n      setResult(data.result);\n      setCurrentKey(data.key);\n      setAttackResults([]);\n      setErrors({});\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({\n        submit: 'Failed to encrypt text. Please try again.'\n      });\n    }\n    setLoading(false);\n  };\n  const handleDecrypt = async () => {\n    if (!validateInputs()) return;\n    if (!currentKey) {\n      setErrors({\n        submit: 'No encryption key available. Please encrypt some text first.'\n      });\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/monoalphabetic/decrypt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: text,\n          key: currentKey\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Server error');\n      }\n      const data = await response.json();\n      setResult(data.result);\n      setAttackResults([]);\n      setErrors({});\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({\n        submit: 'Failed to decrypt text. Please try again.'\n      });\n    }\n    setLoading(false);\n  };\n  const handleAttack = async () => {\n    if (!validateInputs()) return;\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/monoalphabetic/attack', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Server error');\n      }\n      const data = await response.json();\n      setAttackResults(data.results);\n      setResult('');\n      setErrors({});\n    } catch (error) {\n      console.error('Error:', error);\n      setErrors({\n        submit: 'Failed to perform attack. Please try again.'\n      });\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cipher-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Monoalphabetic Cipher (Random Substitution)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `input-group ${errors.text ? 'error' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Text:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: text,\n          onChange: e => {\n            setText(e.target.value);\n            setErrors({\n              ...errors,\n              text: '',\n              submit: ''\n            });\n          },\n          placeholder: \"Enter text...\",\n          className: errors.text ? 'error' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), errors.text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: errors.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), errors.submit && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message submit-error\",\n      children: errors.submit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEncrypt,\n        disabled: loading || !text.trim(),\n        children: \"Encrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDecrypt,\n        disabled: loading || !text.trim() || !currentKey,\n        children: \"Decrypt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAttack,\n        disabled: loading || !text.trim(),\n        children: \"Analyze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Processing...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 19\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this), attackResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attack-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Attack Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-container\",\n        children: attackResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: result.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this), result.frequencies && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Frequency Analysis:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 22\n            }, this), \" \", result.frequencies]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 19\n          }, this), result.mapping && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Letter Mappings:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 24\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n              children: JSON.stringify(result.mapping, null, 2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 19\n          }, this), result.decrypted && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Decrypted Attempt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 22\n            }, this), \" \", result.decrypted]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this), currentKey && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"key-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Current Encryption Key:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"key-note\",\n        children: \"This key is needed for decryption. A new random key is generated for each encryption.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"key-sample\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Sample of key mappings:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: JSON.stringify(Object.fromEntries(Object.entries(currentKey).slice(0, 5)), null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(MonoalphabeticCipher, \"G5Moc6QXRqmZ/Ut5HPaa1F2hcDw=\");\n_c = MonoalphabeticCipher;\nexport default MonoalphabeticCipher;\nvar _c;\n$RefreshReg$(_c, \"MonoalphabeticCipher\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MonoalphabeticCipher","_s","text","setText","result","setResult","currentKey","setCurrentKey","attackResults","setAttackResults","loading","setLoading","errors","setErrors","validateInputs","newErrors","trim","length","Object","keys","handleEncrypt","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","key","error","console","submit","handleDecrypt","handleAttack","results","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","disabled","map","index","description","frequencies","mapping","decrypted","fromEntries","entries","slice","_c","$RefreshReg$"],"sources":["C:/Users/muham/Desktop/cipher-operation/Lab1/cipher-frontend/src/components/MonoalphabeticCipher.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './CipherStyles.css';\r\n\r\nfunction MonoalphabeticCipher() {\r\n  const [text, setText] = useState('');\r\n  const [result, setResult] = useState('');\r\n  const [currentKey, setCurrentKey] = useState(null);\r\n  const [attackResults, setAttackResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateInputs = () => {\r\n    const newErrors = {};\r\n\r\n    // Validate text\r\n    if (!text.trim()) {\r\n      newErrors.text = 'Text is required';\r\n    } else if (text.length > 500) {\r\n      newErrors.text = 'Text must be less than 500 characters';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleEncrypt = async () => {\r\n    if (!validateInputs()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/monoalphabetic/encrypt', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Server error');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResult(data.result);\r\n      setCurrentKey(data.key);\r\n      setAttackResults([]);\r\n      setErrors({});\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setErrors({ submit: 'Failed to encrypt text. Please try again.' });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleDecrypt = async () => {\r\n    if (!validateInputs()) return;\r\n    if (!currentKey) {\r\n      setErrors({ submit: 'No encryption key available. Please encrypt some text first.' });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/monoalphabetic/decrypt', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          text: text,\r\n          key: currentKey\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Server error');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResult(data.result);\r\n      setAttackResults([]);\r\n      setErrors({});\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setErrors({ submit: 'Failed to decrypt text. Please try again.' });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleAttack = async () => {\r\n    if (!validateInputs()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/monoalphabetic/attack', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ text }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Server error');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setAttackResults(data.results);\r\n      setResult('');\r\n      setErrors({});\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setErrors({ submit: 'Failed to perform attack. Please try again.' });\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cipher-container\">\r\n      <h2>Monoalphabetic Cipher (Random Substitution)</h2>\r\n      \r\n      <div className={`input-group ${errors.text ? 'error' : ''}`}>\r\n        <label>\r\n          Text:\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => {\r\n              setText(e.target.value);\r\n              setErrors({ ...errors, text: '', submit: '' });\r\n            }}\r\n            placeholder=\"Enter text...\"\r\n            className={errors.text ? 'error' : ''}\r\n          />\r\n        </label>\r\n        {errors.text && <div className=\"error-message\">{errors.text}</div>}\r\n      </div>\r\n\r\n      {errors.submit && <div className=\"error-message submit-error\">{errors.submit}</div>}\r\n\r\n      <div className=\"button-group\">\r\n        <button \r\n          onClick={handleEncrypt} \r\n          disabled={loading || !text.trim()}\r\n        >\r\n          Encrypt\r\n        </button>\r\n        <button \r\n          onClick={handleDecrypt} \r\n          disabled={loading || !text.trim() || !currentKey}\r\n        >\r\n          Decrypt\r\n        </button>\r\n        <button \r\n          onClick={handleAttack} \r\n          disabled={loading || !text.trim()}\r\n        >\r\n          Analyze\r\n        </button>\r\n      </div>\r\n\r\n      {loading && <div className=\"loading\">Processing...</div>}\r\n\r\n      {result && (\r\n        <div className=\"result\">\r\n          <h3>Result:</h3>\r\n          <p>{result}</p>\r\n        </div>\r\n      )}\r\n\r\n      {attackResults.length > 0 && (\r\n        <div className=\"attack-results\">\r\n          <h3>Attack Results:</h3>\r\n          <div className=\"results-container\">\r\n            {attackResults.map((result, index) => (\r\n              <div key={index} className=\"result-item\">\r\n                <h4>{result.description}</h4>\r\n                {result.frequencies && (\r\n                  <p><strong>Frequency Analysis:</strong> {result.frequencies}</p>\r\n                )}\r\n                {result.mapping && (\r\n                  <div>\r\n                    <p><strong>Letter Mappings:</strong></p>\r\n                    <pre>{JSON.stringify(result.mapping, null, 2)}</pre>\r\n                  </div>\r\n                )}\r\n                {result.decrypted && (\r\n                  <p><strong>Decrypted Attempt:</strong> {result.decrypted}</p>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {currentKey && (\r\n        <div className=\"key-info\">\r\n          <h3>Current Encryption Key:</h3>\r\n          <p className=\"key-note\">This key is needed for decryption. A new random key is generated for each encryption.</p>\r\n          <div className=\"key-sample\">\r\n            <p>Sample of key mappings:</p>\r\n            <pre>{JSON.stringify(Object.fromEntries(\r\n              Object.entries(currentKey).slice(0, 5)\r\n            ), null, 2)}</pre>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MonoalphabeticCipher; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}